import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

//--- Plugins ---
plugins {
    id 'groovy'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.5"
	id "com.jfrog.artifactory" version "4.15.2"
	id "com.gradle.plugin-publish" version "0.12.0"
    id "java-gradle-plugin"
    id 'com.github.ben-manes.versions' version '0.28.0'
}

//--- Project information ---
group = 'com.patdouble'
archivesBaseName = 'jmeter-gradle-plugin'

ext.thisPluginVersion="1.2.0"
ext.jmVersion = "5.3"
version = System.getenv('CIRCLE_TAG') ?: "$thisPluginVersion-$jmVersion-${LocalDateTime.now().format(DateTimeFormatter.ofPattern('yyyyMMddHHmmss'))}"

//--- Repositories ---
repositories {
    jcenter()
//    maven{ url 'https://repository.apache.org/content/repositories/releases'}
}

//--- Dependencies ---
configurations.all {
    resolutionStrategy {
        force "org.codehaus.groovy:groovy-all:2.5.12"
    }
}
dependencies {
    implementation gradleApi()
    implementation 'xml-apis:xml-apis:1.0.b2'
    implementation 'org.apache.ant:ant:1.10.8'
    implementation 'org.rendersnake:rendersnake:1.9.0'
    implementation 'org.beanshell:bsh-core:2.0b4'
    implementation 'commons-httpclient:commons-httpclient:3.1'

    ['win', 'linux', 'mac'].each { platform ->
        implementation "org.openjfx:javafx-base:11:${platform}"
        implementation "org.openjfx:javafx-graphics:11:${platform}"
        implementation "org.openjfx:javafx-controls:11:${platform}"
        implementation "org.openjfx:javafx-swing:11:${platform}"
    }

    //jm-plugins dependencies
    [
            'kg.apc:jmeter-plugins-casutg:2.9',
            'kg.apc:jmeter-plugins-cmd:2.2',
            'kg.apc:jmeter-plugins-webdriver:3.1',
            'kg.apc:jmeter-plugins-perfmon:2.1',
            'kg.apc:jmeter-plugins-udp:0.4',
            'kg.apc:jmeter-plugins-graphs-basic:2.0',
            'kg.apc:jmeter-plugins-graphs-composite:2.0',
            'kg.apc:jmeter-plugins-graphs-dist:2.0',
            'kg.apc:jmeter-plugins-graphs-additional:2.0',
            'kg.apc:jmeter-plugins-graphs-ggl:2.0',
            'net.luminis.jmeter:jmeter-websocket-samplers:1.2.8',
    ].each {
        implementation(it){
            exclude group: 'commons-math3', module: 'commons-math3'
            exclude group: 'commons-pool2', module: 'commons-pool2'
            exclude group: 'xml-apis', module: 'xml-apis'
        }
    }

    //jm dependencies
    implementation("org.apache.jmeter:ApacheJMeter_components:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_http:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_jdbc:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_core:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_tcp:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_java:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_mail:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_ldap:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_ftp:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_functions:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_jms:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_config:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_junit:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_mongodb:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter_native:${jmVersion}")
    implementation("org.apache.jmeter:ApacheJMeter:${jmVersion}")
    implementation("org.apache.jmeter:jorphan:${jmVersion}")

	testImplementation "junit:junit:4.13"
}

configurations {
    implementation.exclude group: "org.apache.jmeter", module: "bom"
}

//--- Tasks ---
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

processResources.doLast {
    ant.replace(
            file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
            token: "@jmeter.version@",
            value: "$jmVersion"
    )
	ant.replace(
			file: "${project.buildDir}/resources/main/jmeter-plugin.properties",
			token: "@thisPlugin.version@",
			value: "$version"
	)
}

//--- mvn-publish ---
def pomConfig = {
	scm {
		url 'scm:git@github.com:double16/jmeter-gradle-plugin.git'
		connection 'scm:git@github.com:double16/jmeter-gradle-plugin.git'
		developerConnection 'scm:git@github.com:double16/jmeter-gradle-plugin.git'
	}
	licenses {
		license {
			name 'The Apache Software License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
			distribution 'repo'
		}
	}
	developers {
		developer {
			id 'double16'
			name 'Patrick Double'
			url 'http://github.com/double16'
			email 'pat@patdouble.com'
			roles { role 'Developer' }
		}
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
			//Workaround for gradle plugin-publish defect: https://issues.gradle.org/browse/GRADLE-3274
            //since maven-publish refuses to propagate exclusions to pom, DIY. :(
			from(components.java)
			def dependencies =  project.configurations[JavaPlugin.IMPLEMENTATION_CONFIGURATION_NAME].getAllDependencies()
			def xmlExclusionList = project.configurations[JavaPlugin.IMPLEMENTATION_CONFIGURATION_NAME].getExcludeRules()
			pom.withXml{
				asNode().dependencies.dependency.each{ xmlDep ->
					//delete scope tag
					def xmlScope = xmlDep.get("scope")
					if (xmlScope) xmlDep.remove(xmlScope)
					//insert exclusions
					def xmlExclusions = xmlDep.exclusions[0]
					if (!xmlExclusions) xmlExclusions = xmlDep.appendNode('exclusions')
					xmlExclusionList.each{ ExcludeRule exRule ->
						def xmlExclusion = xmlExclusions.appendNode('exclusion')
						xmlExclusion.appendNode('groupId', exRule.group)
						xmlExclusion.appendNode('artifactId', exRule.module)
					}
				}

			}
			pom.withXml {
				def root = asNode()
				root.appendNode('description', 'A gradle plugin for running jmeter tests')
				root.children().last() + pomConfig
			}
			artifact sourcesJar
			artifact javadocJar
        }
    }
}

//--- bintray publishing ---
//       for Releases
bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava'] //When uploading Maven-based publication files
    publish = true //If version should be auto published after an upload
    pkg {
        repo = (System.getenv('CIRCLE_TAG') ? 'plugins' : 'plugins-snapshots')
        name = "$archivesBaseName"
        userOrg = 'double16'
        licenses = ['Apache-2.0']
        publicDownloadNumbers = true
        websiteUrl = 'https://github.com/double16/jmeter-gradle-plugin'
        issueTrackerUrl = 'https://github.com/double16/jmeter-gradle-plugin/issues'
        vcsUrl = 'https://github.com/double16/jmeter-gradle-plugin.git'

        version {
            name = project.version //Bintray logical version name
            released = new Date()
//            gpg { sign = true }
        }
    }
}

//--- gradle publishing ---
//       for Releases
publishPlugins.onlyIf {
    System.getenv('CIRCLE_TAG')
}
gradlePlugin {
    plugins {
        jmeterPlugin {
            id = 'com.patdouble.jmeter-gradle-plugin'
            implementationClass = 'net.foragerr.jmeter.gradle.plugins.JMPlugin'
        }
    }
}
pluginBundle {
    website = 'http://jmeter.foragerr.net'
    vcsUrl = 'https://github.com/double16/jmeter-gradle-plugin.git'
    description = 'A Gradle plugin for running JMeter tests'
    tags = ['jmeter', 'performance']

    plugins {
        jmeterPlugin {
          displayName = 'JMeter Gradle Plugin'
      }
    }
}

//--- oss.jfrog artifactory publishing ---
//         For SNAPSHOT publishing
artifactory {
	contextUrl = 'https://oss.jfrog.org/artifactory'
	publish {
		repository {
			repoKey = 'oss-snapshot-local'
			username = System.getenv('BINTRAY_USER')
			password = System.getenv('BINTRAY_API_KEY')
		}

		defaults {
			publications('mavenJava')
		}
	}
	resolve {
		repository {
			repoKey = 'oss-snapshot-local'
			username = System.getenv('BINTRAY_USER')
			password = System.getenv('BINTRAY_API_KEY')
		}
	}
}
